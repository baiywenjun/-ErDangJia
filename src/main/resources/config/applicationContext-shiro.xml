<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-4.0.xsd 
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-4.0.xsd 
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-4.0.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/task
   		http://www.springframework.org/schema/task/spring-task-4.0.xsd">
		
		<!-- 认证授权过滤器 -->	
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="loginUrl" value="/jsp/auth/login.jsp" />
		<property name="successUrl" value="/jsp/index.jsp" /> <!-- 可以不配置，认证成功会会自动跳转到认证前的资源 -->
		<property name="unauthorizedUrl" value="/jsp/auth/refuse.jsp" />
		<property name="securityManager" ref="securityManager"/>
		
		<!-- 过虑器链定义，从上向下顺序执行，最上边配置anon匿名过虑器一般将/** = authc放在最下边 -->
		<property name="filterChainDefinitions">
			<value>

				<!-- 对静态资源设置匿名访问 -->
				/images/** = anon
				/js/** = anon
				/lib/** = anon
				/styles/** = anon
				/css/** = anon
				/test/** =anon
				<!-- 验证码，可匿名访问 -->
				/auth/validatecode.jsp = anon
				<!-- 登陆提交 -->
				/login.do = anon

				<!-- 退出拦截，请求logout.action执行退出操作 -->
				/logout.do = logout

				<!-- /** = authc 所有url都必须认证通过才可以访问 -->
				/** = authc
				<!-- /** = authc -->
			</value>
		</property>
	</bean>
	
	<!-- 认证授权管理器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="customeRealm" />
		<property name="sessionManager" ref="sessionManager" />
	</bean>
	
	<!-- 要从数据取认证及授权的数据，要自定义Realm并注入给管理器 -->
	<bean id="customeRealm" class="com.erdangjia.auth.CustomRealm"/>
	
	
	<!-- shiro框架的session配置 -->
	<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<!-- session的失效时长，单位毫秒 -->
		<property name="globalSessionTimeout" value="600000" />
		<!-- 删除失效的session -->
		<property name="deleteInvalidSessions" value="true" />
		<!-- 更改默认的JSESSIONID标识为sid，避免shiro的session和普通session共存冲突问题，
		比如：localhost:8081使用普通session，localhost:8080使用shiro的session，
		这时两个都记录JSESSIONID名称的cookie会导致冲突。 -->
		<property name="sessionIdCookie.name" value="sid"/>
	</bean>
	
	<!-- 开启shiro注解支持在action方法中可以添加shiro的注解了 -->
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>
</beans>